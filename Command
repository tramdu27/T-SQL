Create database AsoftScript

use AsoftScript
drop table Customers
create table Customers
(
    CustomerID int  primary key,
    CustomerName nvarchar(50),
    PhoneNumber nvarchar(50),
    Email nvarchar(200),
    Address nvarchar(200)
)
drop table Products
create table Products
(
    ProductID nvarchar(50) primary key,
    ProductName nvarchar(255),
    ProductPrice decimal(10, 2),
    Description nvarchar(MAX)
)
drop table Orders
create table Orders
(
    OrderID int primary key,
    CustomerID int,
	ProductID nvarchar(50),
    OrderDate date,
    TotalAmount decimal(10, 2),
    foreign key (CustomerID) references Customers(CustomerID),
	foreign key (ProductID) references Products(ProductID)
)
drop procedure SearchOrder
create procedure SearchOrder
as
declare @orderID int, 
@customerName nvarchar(50),
@productID nvarchar(50),
@productName nvarchar(255),
@dateFrom date,
@datetTo date,
@searchString nvarchar(50)
begin
select * from Orders o
 JOIN Customers c ON o.CustomerID = c.CustomerID
    
    JOIN Products p ON o.ProductID = p.ProductID
where (@orderID = o.OrderID) 
	and (c.CustomerName LIKE CONCAT('%', @customerName, '%'))
	and (p.ProductName LIKE CONCAT('%', @productName, '%'))
	and ((o.OrderDate >= @dateFrom)
    and (o.OrderDate <= @datetTo))
end

declare @customerCounter int = 1
while @customerCounter <= 100
begin
    insert into Customers (CustomerID, CustomerName, PhoneNumber, Email, Address)
    values (@customerCounter, 'CustomerName' + cast(@customerCounter as nvarchar(50)), 'PhoneNumber' + cast(@customerCounter as nvarchar(50)), 'Email' + cast(@customerCounter as nvarchar(50)) + '@example.com', 'Address' + cast(@customerCounter as nvarchar(50)))
    set @customerCounter = @customerCounter + 1
end
select * from Customers
-- Thêm dữ liệu ngẫu nhiên cho bảng Products (100 dòng)
declare @productCounter int = 1
while @productCounter <= 100
begin
    insert into Products (ProductID, ProductName, ProductPrice, Description)
    values ('ProductID' + cast(@productCounter as nvarchar(50)), 'ProductName' + cast(@productCounter as nvarchar(50)), cast(@productCounter * 10.0 as decimal(10, 3)), 'Description' + cast(@productCounter as nvarchar(50)))
    set @productCounter = @productCounter + 1
end


-- Thêm dữ liệu ngẫu nhiên cho bảng Orders (1 triệu dòng trong vòng 2 tháng)
declare @orderCounter int = 1
declare @startDate date = '2023-09-29'
while @orderCounter <= 1000000
begin
    -- Lấy một CustomerID ngẫu nhiên từ bảng Customers
	declare @randomCustomerID nvarchar(50)
    select top 1 @randomCustomerID = CustomerID from Customers order by newid()
    -- Lấy một ProductID ngẫu nhiên từ bảng Products
    declare @randomProductID nvarchar(50)
    select top 1 @randomProductID = ProductID from Products order by newid()
	declare @randomProductPrice decimal(10, 2)
	select @randomProductPrice = ProductPrice from Products p inner join Orders o on p.ProductID= o.ProductID
    select top 1 @randomProductID = ProductID from Products order by newid()
    insert into Orders (OrderID, CustomerID, ProductID, OrderDate, TotalAmount)
    values (@orderCounter, @randomCustomerID, @randomProductID, dateadd(day, cast(rand() * 60 as int), @startDate), cast(rand() * 1000 + 1 as int))
    
    set @orderCounter = @orderCounter + 1
end
drop table Orders
truncate table Products


-- Tạo một index cho cột OrderDate
CREATE NONCLUSTERED INDEX IX_OrderDate_YearMonth ON Orders (OrderDate)

-- Sử dụng một computed column để lưu trữ năm và tháng
ALTER TABLE Orders ADD OrderYear AS YEAR(OrderDate)
ALTER TABLE Orders ADD OrderMonth AS MONTH(OrderDate)

-- Tạo index trên cột computed
CREATE NONCLUSTERED INDEX IX_OrderYearMonth ON Orders (OrderYear, OrderMonth)
-- Sử dụng hint để bắt buộc sử dụng index
SELECT * FROM Orders WITH(INDEX(IX_OrderYearMonth)) WHERE OrderYear = 2023


select * from Customers c join Orders o  on c.CustomerID = o.CustomerID

create procedure GetCustomerByMonth
    @Start DATE,
    @End DATE
AS
BEGIN
    SELECT TOP 10
        c.CustomerID,
        c.CustomerName,
        SUM(o.TotalAmount) AS TotalAmount
    FROM
        Customers c
    JOIN
        Orders o ON c.CustomerID = o.CustomerID
    WHERE
        month(o.OrderDate) >= @Start
        AND month(o.OrderDate) <= @End
    GROUP BY
        c.CustomerID, c.CustomerName
    ORDER BY
        TotalAmount DESC
END


